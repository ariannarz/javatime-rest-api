FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# JavaTime v1

REpresentational State Transfer specified about jvtm project.

Dates format are specified as the follow `yyyy-mm-dd`, times as `HH:mm:ss:SSS`, according to
[Java SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html).

# JavaTime [/]

JavaTime does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "javatime_url": "/javatime"
        }

+ Response 500
    Returned when a generic error occours.

    + Body
    
#######################
# Group S01 - Users
#######################

This group retrieves the information about the users.

## Users collections [/users{?page}{?username}]

+ Attributes (Collection)
  + userslist (array[User]) - array of users

### List Users [GET]
List of users.

+ Parameters
    + page: 1 (optional, number) - The page of users to return

+ Response 200 (application/json)

    + Headers

            Link: </users?username=user1>; rel="next"

    + Attributes (Users collections)

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create User[POST]
Create a new user.

+ Request (application/json)
    + Attributes (User Create)

+ Response 201

    + Headers

            Location: /users/user1

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## User [/users/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the user

+ Attributes (User Base)
    + id: 1 (required, number) - ID of the user

### Read User [GET]

+ Response 200 (application/json)

    + Attributes (User)
      + id: 1 (required, number) - ID of the user

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Update User [PUT]

+ Request (application/json)

    + Attributes (User Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete User [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

#######################
# Group S02 - Shops
#######################

This group retrieves and updates the shops. It offers some support entry point.

## Shops collections [/shops{?page}{?city}{?type}]

+ Attributes (Collection)
  + shopslist (array[Shop]) - array of shops

### List Shops [GET]
The list of the shops can be obtained by filtering for any parameters as city or type. The result can be paginated.

+ Parameters
    + page: 1 (optional, number) - The page of shops to return
    + city: `Milano` (optional, string) - shop's city
    + type: `BAR` (optional, string) - shop's type

+ Response 200 (application/json)

    + Headers

            Link: </shops?type=bar>; rel="next"

    + Attributes (Shops collections)

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Find Shops [GET /shops/find{?city}{?type}{?postalCode}{?status}]
Search all task that respect the filter.

+ Parameters
    + city: `Milano` (optional, string) - shop's city
    + type: `BAR` (optional, string) - shop's type
    + postalCode: `20831` (optional, string) - zip code

+ Response 200 (application/json)
    + Attributes (Shops collections)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Shop[POST]
Create a new shop.

+ Request (application/json)
    + Attributes (Shop Create)

+ Response 201

    + Headers

            Location: /shops/1

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Shop [/shops/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the shop

+ Attributes (Shop Base)
    + id: 1 (required, number) - ID of the shop

### Read Shop [GET]

+ Response 200 (application/json)

    + Attributes (Shop)
      + id: 1 (required, number) - ID of the shop to read

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Update Shop [PUT]

+ Request (application/json)

    + Attributes (Shop Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Shop [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
#######################
# Group S03 - Reviewes
#######################

This group takes care of registering the reviews and publications sent by users for a specific shop and a specif product.

## Reviews collections [/reviews{?page}{?userId}{?shopId}{?date}]

+ Attributes (Collection)
  + reviewslist (array[Review]) - array of review

### List Reviews [GET]
The list of reviews filtering by a user, or date, or nothing..

+ Parameters
    + page: 1 (optional, number) - The page of reviews to return
    + userId: 1 (optional, number) - ID of the user
    + shopId: 1 (optional, number) - ID of the shop
    + date: `20160112`(optional, number) - the review create in a date

+ Response 200 (application/json)

    + Headers

            Link: </reviews?date=20160112>; rel="next"

    + Attributes (Reviews collections)

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Review[POST]
Create a new review.

+ Request (application/json)
    + Attributes (Review Create)

+ Response 201

    + Headers

            Location: /reviews/1

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Review [/reviews/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the review

+ Attributes (Review Base)
    + id: 1 (required, number) - ID of the review

### Read Review [GET]

+ Response 200 (application/json)

    + Attributes (Review)
      + id: 1 (required, number) - ID of the review

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Update Review [PUT]

+ Request (application/json)

    + Attributes (Review Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Review [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
#######################
# Group S04 - Rates
#######################

This group takes care of registering the rates about a single reviews

## Rates collections [/rates{?page}{?reviewId}{?productId}]

+ Attributes (Collection)
  + rateslist (array[Rate]) - array of rate

### List Rates [GET]
The list of rates filtering by any paramters

+ Parameters
    + page: 1 (optional, number) - The page of reviews to return
    + reviewId: 1 (optional, number) - ID of the review
    + productId: 1 (optional, number) - ID of the product

+ Response 200 (application/json)

    + Headers

            Link: </rates?reviewId=1>; rel="next"

    + Attributes (Rates collections)

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Rate[POST]
Create rate about specific review.

+ Request (application/json)
    + Attributes (Rate Create)

+ Response 201

    + Headers

            Location: /rates/1

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Rate [/rates/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the rate

+ Attributes (Rate Base)
    + id: 1 (required, number) - ID of the rate

### Read Rate [GET]

+ Response 200 (application/json)

    + Attributes (Rate)
      + id: 1 (required, number) - ID of the rate

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Update Rate [PUT]

+ Request (application/json)

    + Attributes (Rate Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Rate [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

#######################
# Group S05 - Reports
#######################

A user can send any comment by this service

## Reports collections [/reports{?page}{?reviewId}{?productId}{?userId}{?date}]

+ Attributes (Collection)
  + rateslist (array[Report]) - array of reports

### List Reports [GET]
The list of reports filtering by any paramter, as specific users or date..

+ Parameters
    + page: 1 (optional, number) - The page of reviews to return
    + reviewId: 1 (optional, number) - ID of the review
    + productId: 1 (optional, number) - ID of the product
    + userId: 1 (optional, number) - ID of the user
    + date: `20160112`(optional, number) - the review create in a date

+ Response 200 (application/json)

    + Headers

            Link: </rates?userId=1>; rel="next"

    + Attributes (Reports collections)

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Report[POST]
Create a report about any review or product or.. nothing!

+ Request (application/json)
    + Attributes (Report Create)

+ Response 201

    + Headers

            Location: /reports/1

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Report [/reports/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the rate

+ Attributes (Report Base)
    + id: 1 (required, number) - ID of the rate

### Read Report [GET]

+ Response 200 (application/json)

    + Attributes (Report)
      + id: 1 (required, number) - ID of the rate

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Update Report [PUT]

+ Request (application/json)

    + Attributes (Report Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Report [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
# Data Structures

## Collection (object)
+ count: 1 (number) - total number of resources retrieved

## Shop Base (object)
+ userId: 1 (number) - id of the publisher
+ name: `Bar Mario` (string, required) - name of the shop
+ city: `Seregno` (string, required) - city of the shop
+ postal_code: `20500` (number, required) - postal code
+ nation: `Italy` (string) - nation
+ address: `via Torino` (string, required) - shop's address
+ address_number: `240` (string, required) - shop's number address
+ prefix_number: `+39` (string, optional) - prefix of telephone number
+ telephone_number: `0123-1234567` (string, optional) - telephone number
+ site: `www.bar.com` (string) - the site url
+ shopType (enum) - Identifies the type of the shop
    + BAR
    + PUB
    + BISTROT
+ description:  `Bar in central city` (string) - a short description
+ photo: `http://javatTime.flushyourlife.com/images/photo.png` (array) - the photo list of the shop

## Shop Create (Shop Base)
+ photo: `R0lGODlhEAAOALMAAOazToeHh0tLS/7LZv/0jvb29t/f3//Ub//ge8WSLf/rhf/3kdbW1mxsbP//mf///yH5BAAAAAAAL` (array) - serialized stream (base64) representing the image.

## Shop Update (Shop Base)
+ photo: `R0lGODlhEAAOALMAAOazToeHh0tLS/7LZv/0jvb29t/f3//Ub//ge8WSLf/rhf/3kdbW1mxsbP//mf///yH5BAAAAAAAL` (array) - serialized stream (base64) representing the image.

## Review Base (object)
+ userId: 1 (number) - id of the publisher
+ shopId: 1 (number) - id of the shop
+ title:  `A special coffee` (string, required) - title
+ comments:  `This coffe is good...` (string) - description of the review
+ photo: 1 (array[string]) - list of image
+ date:  `2015-11-10T18:24:18` (number) - creation date
+ rates (array[Rate Base]) - array of rates

## Review Create (Review Base)

## Review Update (Review Base)

## Rate Base (object)
+ reviewId: 1 (number) - id of the review
+ productId: 1 (number, required) - id of the product
+ rate: 5 (number, required) - evalutation. The range is between 1 to 5

## Rate Create (Rate Base)

## Rate Update (Rate Base)

## User Base (object)
+ email: `user@mail.it` (string, required) - email of the user. Email must be unique
+ password: `p4ssw0rd` (string, required) - password
+ username: `user1` (string, required) - displayed name. username is the id of the user.
+ city: `Milano` (string) - city of the user
+ active: `Y` (boolean) - the user confirmed his email address
+ permission: `ADMIN` (enum) - the user's grant
    + ADMIN
    + STANDARD

## User Create (User Base)

## User Update (User Base)

## Report Base (object)
+ userId: 1 (number) - id of the publisher
+ shopId: 1 (number) - id of the shop
+ reviewId: 1 (number) - id of the review
+ comments:  `This review is bad...` (string) - description of the review
+ date:  `2015-11-10T18:24:18` (number) - creation date

## Report Create (Report Base)

## Report Update (Report Base)

